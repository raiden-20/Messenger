version: "3.9"
services:
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - KONG_KEY=${KONG_KEY}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - AUTH_POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - AUTH_POSTGRES_USER=${AUTH_POSTGRES_USER}
      - AUTH_POSTGRES_URL=${AUTH_POSTGRES_URL}
      - AUTH_LINK_ACTIVATION=${AUTH_LINK_ACTIVATION}
      - AUTH_LINK_EMAIL=${AUTH_LINK_EMAIL}
    networks:
      - backend
    depends_on:
      - auth-db

  auth-db:
    container_name: auth-db
    image: postgres:14
    volumes:
      - auth-db:/var/lib/postgresql/data
      - ./init_db/auth_init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${AUTH_DB_PORT}:5432
    environment:
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
    restart: on-failure
    networks:
      - backend
    healthcheck:
      test: "CMD-SHELL pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}"

  mail-sender:
    container_name: mail-sender
    build:
      context: ./mail-sender
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    networks:
      - backend
    depends_on:
      - auth-service

  social-service:
    container_name: social-service
    build:
      context: ./social-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - SOCIAL_POSTGRES_PASSWORD=${SOCIAL_POSTGRES_PASSWORD}
      - SOCIAL_POSTGRES_USER=${SOCIAL_POSTGRES_USER}
      - SOCIAL_POSTGRES_URL=${SOCIAL_POSTGRES_URL}
    networks:
      - backend
    depends_on:
      - social-db

  social-db:
    container_name: social-db
    image: postgres:14
    volumes:
      - social-db:/var/lib/postgresql/data
      - ./init_db/social_init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${SOCIAL_DB_PORT}:5432
    environment:
      - POSTGRES_USER=${SOCIAL_POSTGRES_USER}
      - POSTGRES_PASSWORD=${SOCIAL_POSTGRES_PASSWORD}
      - POSTGRES_DB=${SOCIAL_POSTGRES_DB}
    restart: on-failure
    networks:
      - backend
    healthcheck:
      test: "CMD-SHELL pg_isready -U ${SOCIAL_POSTGRES_USER} -d ${SOCIAL_POSTGRES_DB}"

  blog-service:
    container_name: blog-service
    build:
      context: ./blog-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - BLOG_POSTGRES_PASSWORD=${BLOG_POSTGRES_PASSWORD}
      - BLOG_POSTGRES_USER=${BLOG_POSTGRES_USER}
      - BLOG_POSTGRES_URL=${BLOG_POSTGRES_URL}
    networks:
      - backend
    depends_on:
      - blog-db

  blog-db:
    container_name: blog-db
    image: postgres:14
    volumes:
      - blog-db:/var/lib/postgresql/data
      - ./init_db/blog_init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - ${BLOG_DB_PORT}:5432
    environment:
        - POSTGRES_USER=${BLOG_POSTGRES_USER}
        - POSTGRES_PASSWORD=${BLOG_POSTGRES_PASSWORD}
        - POSTGRES_DB=${BLOG_POSTGRES_DB}
    restart: on-failure
    networks:
      - backend
    healthcheck:
      test: "CMD-SHELL pg_isready -U ${BLOG_POSTGRES_USER} -d ${BLOG_POSTGRES_DB}"

  file-service:
    container_name: file-service
    build:
      context: ./file-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PUBLIC_HOST=${MINIO_PUBLIC_HOST}
    networks:
      - backend
      
volumes:
  auth-db:
    name: auth-db
  social-db:
    name: social-db
  blog-db:
    name: blog-db

networks:
  backend:
    name: backend