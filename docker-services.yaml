version: "3.9"
services:
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - KONG_KEY=${KONG_KEY}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - AUTH_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AUTH_POSTGRES_USER=${POSTGRES_USER}
      - AUTH_POSTGRES_URL=${AUTH_POSTGRES_URL}
      - AUTH_LINK_ACTIVATION=${AUTH_LINK_ACTIVATION}
      - AUTH_LINK_EMAIL=${AUTH_LINK_EMAIL}
    networks:
      - backend


  mail-sender:
    container_name: mail-sender
    build:
      context: ./mail-sender
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    networks:
      - backend
    depends_on:
      - auth-service

  social-service:
    container_name: social-service
    build:
      context: ./social-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - SOCIAL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SOCIAL_POSTGRES_USER=${POSTGRES_USER}
      - SOCIAL_POSTGRES_URL=${SOCIAL_POSTGRES_URL}
    networks:
      - backend

  blog-service:
    container_name: blog-service
    build:
      context: ./blog-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - BLOG_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BLOG_POSTGRES_USER=${POSTGRES_USER}
      - BLOG_POSTGRES_URL=${BLOG_POSTGRES_URL}
    networks:
      - backend


  file-service:
    container_name: file-service
    build:
      context: ./file-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PUBLIC_HOST=${MINIO_PUBLIC_HOST}
    networks:
      - backend

  # chat-db:
  #   container_name: chat-db
  #   image: mongo:7.0.5-rc0
  #   volumes:
  #     - ./init_db/chat_init_db.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
  #     - chat-db:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #     MONGO_INITDB_DATABASE: admin
  #   ports:
  #     - ${CHAT_DB_PORT}:27017
  #   restart: on-failure
  #   networks:
  #     - backend
  #   # healthcheck:
  #   #   test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

networks:
  backend:
    name: backend